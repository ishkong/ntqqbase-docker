name: Build and Push Docker Base Images

on:
  push:
    paths:
      - 'qq_version.json'
  workflow_dispatch:

jobs:
  parse:
    runs-on: ubuntu-latest
    outputs:
      entries: ${{ steps.parse.outputs.entries }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Parse qq_version.json
        id: parse
        run: |
          entries=$(jq -c '.' qq_version.json)
          echo "entries=$entries" >> $GITHUB_OUTPUT

  build:
    needs: parse
    runs-on: ubuntu-latest
    strategy:
      matrix:
        entry: ${{ fromJson(needs.parse.outputs.entries) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image (amd64)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          build-args: |
            VERSION=${{ matrix.entry.version }}
            HASH=${{ matrix.entry.hash }}
            ARCH=amd64
          tags: |
            ghcr.io/${{ github.repository_owner }}/ntqqbase:${{ matrix.entry.version }}

      - name: Build and Push Docker Image (arm64)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/arm64
          build-args: |
            VERSION=${{ matrix.entry.version }}
            HASH=${{ matrix.entry.hash }}
            ARCH=arm64
          tags: |
            ghcr.io/${{ github.repository_owner }}/ntqqbase:${{ matrix.entry.version }}-arm64
